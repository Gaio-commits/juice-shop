name: DevSecOps Pipeline para OWASP Juice Shop

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - develop
      - main
      - master
  workflow_dispatch:

jobs:
  # =====================================================================================
  # ETAPA 1: LINTING DE ARQUIVOS DA PIPELINE
  # =====================================================================================
  lint-files:
    name: Linting de Arquivos da Pipeline (YAML)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código do repositório
        uses: actions/checkout@v4

      - name: Lint dos arquivos YAML da pipeline
        uses: ibiqlik/action-yamllint@v3.1.1
        continue-on-error: true
        with:
          file_or_dir: .github/workflows/
          config_file: .yamllint.yml

  # =====================================================================================
  # ETAPA 2: ANÁLISE ESTÁTICA DE SEGURANÇA DE APLICAÇÃO (SAST)
  # =====================================================================================
  sast-analysis:
    name: Análise Estática de Segurança (SAST com Semgrep)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout do código do repositório
        uses: actions/checkout@v4

      - name: Configurar Semgrep
        run: pip install semgrep

      - name: Executar Semgrep
        run: semgrep scan --config "p/default" --sarif --output semgrep.sarif || true

      - name: Upload do relatório SARIF do Semgrep
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.sarif
          if-no-files-found: warn

      - name: Upload do resultado SARIF do Semgrep para GitHub Security
        if: always() && hashFiles('semgrep.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-juiceshop

  # =====================================================================================
  # ETAPA 3: ANÁLISE DE COMPOSIÇÃO DE SOFTWARE (SCA) E GERAÇÃO DE SBOM
  # =====================================================================================
  sca-analysis:
    name: Análise de Composição de Software (SCA) e Geração de SBOM
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout do código do repositório
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Gerar/Atualizar package-lock.json
        run: |
          npm install --package-lock-only --ignore-scripts
          if [ ! -f "package-lock.json" ]; then
            echo "::error::Arquivo package-lock.json não foi gerado."
            exit 1
          fi

      - name: Gerar SBOM com Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft . -o cyclonedx-json=bom.json || echo "::warning::Falha ao gerar SBOM com Syft."
          if [ ! -s bom.json ]; then
            echo "::error::Arquivo bom.json (SBOM) NÃO foi gerado ou está vazio."
            exit 1
          fi
        shell: bash

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: bom.json
          if-no-files-found: error

      - name: Configurar Java para Dependency-Check
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Download OWASP Dependency-Check
        run: |
          DC_VERSION="10.0.2"
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v${DC_VERSION}/dependency-check-${DC_VERSION}-release.zip
          unzip dependency-check-${DC_VERSION}-release.zip

      - name: Executar OWASP Dependency-Check
        id: run-dependency-check
        continue-on-error: true
        run: |
          echo "Iniciando OWASP Dependency-Check..."
          # AVISO: Configure o segredo NVD_API_KEY no seu repositório para evitar falhas.
          ./dependency-check/bin/dependency-check.sh \
            --scan . \
            --project "OWASP-Juice-Shop-Fork" \
            --format SARIF \
            --out dependency-check-results.sarif \
            --enableExperimental \
            --nvdApiKey ${{ secrets.NVD_API_KEY }} \
            --log dependency-check.log \
            --failOnCVSS 11

      - name: Upload do Log de Depuração do Dependency-Check em caso de falha
        if: steps.run-dependency-check.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check-Debug-Log
          path: dependency-check.log
          if-no-files-found: ignore

      - name: Upload do relatório SARIF do Dependency-Check
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check-Scan-Results
          path: dependency-check-results.sarif
          if-no-files-found: warn

      - name: Upload do resultado SARIF do Dependency-Check para GitHub Security
        if: always() && hashFiles('dependency-check-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dependency-check-results.sarif
          category: owasp-dependency-check-juiceshop

  # =====================================================================================
  # ETAPA 4: SCAN DE SEGREDOS
  # =====================================================================================
  secrets-scan:
    name: Varredura de Segredos com Gitleaks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout do código (com histórico completo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Executar Gitleaks
        uses: gitleaks/gitleaks-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_REPORT_FORMAT: "sarif"
          GITLEAKS_REPORT_PATH: "gitleaks-report.sarif"
          GITLEAKS_EXIT_CODE: "0"

      - name: Upload do relatório SARIF do Gitleaks
        uses: actions/upload-artifact@v4
        with:
          name: Gitleaks-Scan-Results
          path: gitleaks-report.sarif
          if-no-files-found: warn

      - name: Upload do resultado SARIF do Gitleaks para GitHub Security
        if: always() && hashFiles('gitleaks-report.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-report.sarif
          category: gitleaks-juiceshop

  # =====================================================================================
  # ETAPA 5: SCAN DE IMAGEM DE CONTAINER
  # =====================================================================================
  scan-official-juice-shop-image:
    name: Scan da Imagem Docker Oficial do Juice Shop com Trivy
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Scan da Imagem Docker Oficial com Trivy
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: 'bkimminich/juice-shop:latest'
          format: 'sarif'
          output: 'trivy-juiceshop-official-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '0'

      - name: Upload do relatório SARIF do Trivy
        uses: actions/upload-artifact@v4
        with:
          name: Trivy-OfficialImageScan-Results
          path: trivy-juiceshop-official-results.sarif
          if-no-files-found: warn

      - name: Upload do resultado SARIF do Trivy para GitHub Security
        if: always() && hashFiles('trivy-juiceshop-official-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-juiceshop-official-results.sarif'
          category: trivy-juiceshop-official-image

  # =====================================================================================
  # ETAPA 6: ANÁLISE DINÂMICA DE SEGURANÇA DE APLICAÇÃO (DAST)
  # =====================================================================================
  dast-analysis:
    name: Análise Dinâmica (DAST com ZAP no Juice Shop)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Iniciar OWASP Juice Shop Docker container
        run: |
          docker pull bkimminich/juice-shop:latest
          docker run -d --name juice-shop-dast -p 3000:3000 bkimminich/juice-shop:latest
          echo "Aguardando Juice Shop iniciar..."
          timeout 120s bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200"; do echo -n "."; sleep 5; done'
          echo "Juice Shop iniciado!"

      - name: Executar OWASP ZAP Baseline Scan no Juice Shop
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap_juiceshop_rules.tsv'
          cmd_options: '-j -T 120'
          fail_action: false

      - name: Parar e remover o container do Juice Shop
        if: always()
        run: |
          docker stop juice-shop-dast || true
          docker rm juice-shop-dast || true

  # =====================================================================================
  # ETAPA 7: NOTIFICAÇÃO EM CASO DE FALHA
  # =====================================================================================
  notify-on-failure:
    name: Notificar em Caso de Falha da Pipeline
    if: failure()
    needs: [lint-files, sast-analysis, sca-analysis, secrets-scan, scan-official-juice-shop-image, dast-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Enviar notificação de falha
        run: |
          echo "::error::ALERTA: Um ou mais jobs da pipeline DevSecOps falharam!"
          echo "Verifique os detalhes em: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
